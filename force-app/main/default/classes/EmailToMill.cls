/* ***********************************************************
    Name        : EmailToCarrierwithSelectedAttachments
    Function    : This Apex class is used to send an email with its body displaying the Carrier email message, 
                : and attaching selected Files associated with the Load record, and the BOL and/or Rate Con PDF generated by the system 
    Author      : ASUCCINI LLC.               
*********************************************************** */
public class EmailToMill {
   
    public id loadid {get; set;}
    public FreightTM__Load__c Load {get; set;}
    public Organization coOrg {get; set;}
    public List<ContentDocumentLink> cDocLinkList; //all File links under a Load record
    public List<ContentVersion> cvfileList {get; set;} //all File details under a Load record
    public List<id> ConDocIds; //all File ContentVersionIds under a Load record
    public List<Attachment> attachments; //list for inserting attachments under email history activity record
    
    //Invoice Email Template
    public String subject {get; set;} //email subject
    public String body {get; set;} //plain text email body
    public String emailAddr {get; set;} //entered email addresses, split with comma
    public List<String> emailAddrList; //email address list
    //public String psubject {get; set;} //email subject placeholder
    //public String pbody {get; set;} //text email body placeholder
    //public String hbody {get; set;} //html email body
    //public EmailTemplate et; //query email template object for Invoice template
    //public String EmailTemplateID; //assign invoice email template from org
    
    //checkboxes
    public List<String> checkboxFileList {get;set;}  //holds the values of the selected checkboxes for Files

    public EmailToMill(ApexPages.StandardController stndCont) //constructor
    {
        loadid = ApexPages.currentPage().getParameters().get('id');
        Load = [Select Name, FreightTM__Driver__c, Confirmation_Number__c,
                           FreightTM__Driver__r.Name, FreightTM__Driver__r.FreightTM__PIN__c, FreightTM__Calendar_Load__c, FreightTM__Driver__r.FreightTM__First_Name__c,
                           
                           FreightTM__Confirmation_Number__c, FreightTM__Status__c, FreightTM__Load_Canceled__c, Quantity__c, FreightTM__Commodity__c,
                           FreightTM__Distance__c, FreightTM__Remarks__c, FreightTM__Total_Miles__c, FreightTM__Driver_Remarks__c,
                           
                           FreightTM__Pickup_Address__c, FreightTM__Pickup_City__c, FreightTM__Pickup_State__c, Mat_Type__c, Mat_Grade__c,
                           FreightTM__Pickup_Zip_Code__c, FreightTM__Pickup_Country__c, FreightTM__Pickup_Arrival__c, Pickup_By__c, FreightTM__Pickup_By_Appointment__c,
                           FreightTM__Pickup_Ref__c, FreightTM__Pickup_Remarks__c,FreightTM__Carrier_Obj__c, FreightTM__Carrier_Obj__r.Name,
                           
                           FreightTM__Delivery_Address__c, FreightTM__Delivery_City__c, FreightTM__Delivery_State__c, FreightTM__Carrier_Obj__r.FreightTM__Email__c,
                           FreightTM__Delivery_Zip_Code__c, FreightTM__Delivery_Country__c, FreightTM__Delivery_Arrival__c, Deliver_By__c, FreightTM__Delivery_By_Appointment__c,
                           FreightTM__Delivery_Ref__c, FreightTM__Delivery_Remarks__c
              from FreightTM__Load__c where id =: loadid];
        
        coOrg = [Select o.Street, o.City, o.State, o.PostalCode, o.Phone, o.Name, o.Id, o.Fax, o.Country, o.Address From Organization o];
  
        
        //change for each org 
        /* /////////////// */ 
        //EmailTemplateID = '00X46000000DnPH';
        /* /////////////// */ 

        //Email Template ID
        /* /////////////// */ 
        //EmailTemplateID = load.Email_Template_Id__c;
        /* /////////////// */ 
        
        checkboxFileList = new List<String>(); //create new list of Files checkboxes
        
        //query all Files under a Load record
        /* /////////////// */
        cDocLinkList = [SELECT Id, ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId =: loadid];
        cvfileList = new List<ContentVersion>();
        
        for(ContentDocumentLink cDocLink : cDocLinkList) {
            ContentVersion cvfile = [SELECT Title, FileType FROM ContentVersion WHERE ContentDocumentId =: cDocLink.ContentDocumentId];
            //ContentVersion cvfile = [SELECT Title, PathOnClient, FileType, VersionData FROM ContentVersion WHERE ContentDocumentId =: cDocLink.ContentDocumentId];
            cvfileList.add(cvfile);
            //cvfileList = [SELECT Title, PathOnClient, FileType, VersionData FROM ContentVersion WHERE ContentDocumentId =: cDocLink.ContentDocumentId AND IsLatest = true];
        }
        /* /////////////// */
        
        //grab ContentDocumentId of all Files under a Load record
        /* /////////////// */
        ConDocIds = new List<id>();
        
        for(ContentDocumentLink cDocLink : cDocLinkList) 
        {
            ConDocIds.add(cDocLink.ContentDocumentId);
        }
        /* /////////////// */

        //query Invoice email template
        /*
        et = [Select Id, Name, Subject, Body, HtmlValue FROM EmailTemplate WHERE Id =: EmailTemplateID]; //Invoice Email Template
        
        subject = et.Subject;
        body = et.Body;
        hbody = et.HtmlValue;
        
        if(load.FreightTM__Customer__r.Name != null){
            subject=subject.replace('{!FreightTM__Load__c.FreightTM__Customer__r.Name}', load.FreightTM__Customer__r.Name);
            body=body.replace('{!FreightTM__Load__c.FreightTM__Customer__r.Name}', load.FreightTM__Customer__r.Name);
            hbody=hbody.replace('{!FreightTM__Load__c.FreightTM__Customer__r.Name}', load.FreightTM__Customer__r.Name);
        }
        else { 
            subject=subject.replace('{!FreightTM__Load__c.FreightTM__Customer__r.Name}', '');
            body=body.replace('{!FreightTM__Load__c.FreightTM__Customer__r.Name}', '');
            hbody=hbody.replace('{!FreightTM__Load__c.FreightTM__Customer__r.Name}', '');
        }
        subject=subject.replace('{!FreightTM__Load__c.Invoice_Number__c}', load.Invoice_Number__c);
        subject=subject.replace('{!Organization.Name}', UserInfo.getOrganizationName());

        body=body.replace('{!FreightTM__Load__c.Invoice_Number__c}', load.Invoice_Number__c);
        body=body.replace('{!Organization.Name}', UserInfo.getOrganizationName());
        body=body.replace('{!Organization.Street}', coOrg.Street);
        body=body.replace('{!Organization.City}', coOrg.City);
        body=body.replace('{!Organization.State}', coOrg.State);
        body=body.replace('{!Organization.PostalCode}', coOrg.PostalCode);
        body=body.replace('{!Organization.Phone}', coOrg.Phone);
        body=body.replace('{!Organization.Fax}', coOrg.Fax);

        hbody=hbody.replace('{!FreightTM__Load__c.Invoice_Number__c}', load.Invoice_Number__c);
        hbody=hbody.replace('{!$Organization.Name}', UserInfo.getOrganizationName());
        hbody=hbody.replace('{!$Organization.Street}', coOrg.Street);
        hbody=hbody.replace('{!$Organization.City}', coOrg.City);
        hbody=hbody.replace('{!$Organization.State}', coOrg.State);
        hbody=hbody.replace('{!$Organization.PostalCode}', coOrg.PostalCode);
        hbody=hbody.replace('{!$Organization.Phone}', coOrg.Phone);
        hbody=hbody.replace('{!$Organization.Fax}', coOrg.Fax);
        */
        
        //Invoice email message in body
        //subject = 'Invoice # ' + load.Invoice_Number__c;
        //getSubject();
        //getBody();
        //subject = subject;
        //body = body;
        //hbody = '';
        

        EmailAddrList = new List<String>();
        EmailAddr = '';
        EmailAddrList = new String[]{ EmailAddr };
               
        subject = coOrg.Name + ' BOL for Load# ' + Load.Name;
        //subject = coOrg.Name + ' Invoice #' + load.Invoice_Number__c + ' for ' + load.FreightTM__Customer__r.Name;
        
        //IF Factoring 
        /*
        if(load.FreightTM__Factoring__c == true) {
            body = 'Dear FleetDocs, \n\n';
            EmailAddr = 'mejaggie@yahoo.com';
        }*/
        //IF NOT Factoring 
        //else {
            //body = 'Dear ' + Load.FreightTM__Carrier_Obj__r.Name + ', \n\n';
            //EmailAddr = Load.FreightTM__Carrier_Obj__r.FreightTM__Email__c;
            //EmailAddrList.add(load.FreightTM__Customer__r.Email__c);
        //}
        
        //EmailAddrList = EmailAddr.split(',');
        
        /*
        if(EmailAddrList.size()> 1) {
            EmailAddrList = EmailAddr.split(',');
        }
        else {
            EmailAddrList = new String[]{ EmailAddr };
        }
        */
        
        system.debug('EmailAddrList stndC' + EmailAddrList.size());
        
        /*
        if(EmailAddrList.size() > 1){
            EmailAddrList = EmailAddr.split(',');
        }
        */
        
        String PickupBy = ''; if(Load.Pickup_By__c != null) { PickupBy = Load.Pickup_By__c.format('EEE, MMM d yyyy HH:mm:ss'); }
        String DeliverBy = ''; if(Load.Deliver_By__c != null) { DeliverBy = Load.Deliver_By__c.format('EEE, MMM d yyyy HH:mm:ss'); }

        body = 'Please find attached BOL for the following:' + ' \n\n';
        body += 'Load #: ' + Load.Name + ' \n';
        body += 'Expected Pickup Time: ' + PickupBy + ' \n';
        body += 'Expected Delivery Time: ' + DeliverBy + ' \n';
        
        if(Load.FreightTM__Remarks__c != null){
            body += 'Delivery Instructions: ' + Load.FreightTM__Remarks__c + ' \n';
        }
        body += '\n';
        
        body += 'Sincerely, \n';
        //body += '<img src="https://c.cs62.content.force.com/sfc/dist/version/renditionDownload?rendition=ORIGINAL_Png&versionId=0685C0000009P5F&operationContext=DELIVERY&contentId=05T5C000000796y&page=0&d=/a/5C000000CbBy/nvV35sGmoOzHa2DGed4DN4yi3Z__NQLSngIehWGThsM&oid=00D5C000000DIbq&dpt=null&viewId=" /> \n';
        body += coOrg.Name + '\n' + coOrg.Street + '\n' + coOrg.City + ', ' + coOrg.State + ' ' + coOrg.PostalCode + '\n' + coOrg.Phone + '\n\n';
        body += Name + '\n' + UserEmail + '\n\n';
    }
    
    String Name = UserInfo.getName();
    String UserEmail = UserInfo.getUserEmail();
    
    
    //create list of checkboxes for Files
    public List<selectOption> getSelectedFiles() { 

        List<selectOption> fileOptions = new List<selectOption>();
        
        //grab ContentDocumentId of all Files under a Load record
        /* /////////////// */
        /*
        List<id> ConDocIds = new List<id>();
        
        for(ContentDocumentLink cDocLink : cDocLinkList) 
        {
            ConDocIds.add(cDocLink.ContentDocumentId);
        }
        */
        /* /////////////// */
        
        system.debug('FileList ' + checkboxFileList.size());

        //for(integer i=0; i < cvfileList.size(); i++) {
        for(ContentVersion cv : [SELECT Title, FileType, ContentDocumentId FROM ContentVersion WHERE ContentDocumentId IN :ConDocIds ]) 
        {   
            fileOptions.add(new selectOption(string.valueof(cv.ContentDocumentId),string.valueof(cv.Title + '.' + cv.FileType))); // selectOption = (value,label)
            //fileOptions.add(new selectOption(string.valueof(cv.Title),string.valueof(cv.Title + '.' + cv.FileType))); // selectOption = (value,label)
            //fileOptions.add(new selectOption(string.valueof(cv.Title + ',' + cv.ContentDocumentId),string.valueof(cv.Title + '.' + cv.FileType))); // selectOption = (value,label)
        }
        //}
        //fileOptions.add(new selectOption('RateCon.pdf', 'RateCon.pdf'));
        fileOptions.add(new selectOption('BOL.pdf', 'BOL.pdf'));
        //fileOptions.add(new selectOption('Invoice_' + load.Invoice_Number__c + '.pdf', 'Invoice_' + load.Invoice_Number__c + '.pdf'));
        
        //have invoice option be selected by default
        //checkboxFileList = new List<String>{ 'RateCon.pdf', 'BOL.pdf' }; //create new list of Files checkboxes
        checkboxFileList = new List<String>{ 'BOL.pdf' }; //create new list of Files checkboxes
        //checkboxFileList = new List<String>{ 'Invoice_' + load.Invoice_Number__c + '.pdf' }; //create new list of Files checkboxes

        return fileOptions;
    }
    
    //get selected checkboxes for Files
    public String[] getCheckboxFileList() {
        return checkboxFileList;
    }
    //set selected checkboxes for Files
    public void setCheckboxFileList(String[] checkboxFileList) {
        this.checkboxFileList = checkboxFileList;
    }
    
    public String getSubject() {
        this.subject = subject;
        return subject;
    }
    
    public String getBody() {
        this.body = body;
        //this.hbody = body;
        return body;
    }
    
    public String getEmailAddr(){
        this.EmailAddr = EmailAddr;
        //this.EmailAddrList = EmailAddr.split(',');
        return EmailAddr;
    }
    
    /*
    public String[] getEmailAddrList() {
        return EmailAddrList;
    }
    
    public void setEmailAddrList(String[] EmailAddrList) {
        system.debug('EmailAddr Set ' + EmailAddrList);
        this.EmailAddrList = EmailAddrList;
    }
    */
    
    public PageReference Send(){
        //if(load.size() > 0)
        
        getSubject();    
        getBody();
        getEmailAddr();
        //getEmailAddrList();
        
        String hbody = body.replace('\n', '<br />');
        
        //define email
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
            
        //set email parameters
        //email.setTemplateId(EmailTemplateID); //without invoice attached
        //email.setTemplateId('00X46000000DnPH'); //without invoice attached
        //email.setTemplateId('00X46000000DnEd'); //with invoice attached
        email.setSubject(subject);
        //email.setSubject('Invoice # ' + load.Invoice_Number__c);
        
        //email.setToAddresses(new String[] { EmailAddr }); 
        system.debug('EmailAddrList Send before ' + EmailAddrList.size());
        /*
        for(integer i=0; i < EmailAddrList.size(); i++) {
            email.setToAddresses(new String[] { EmailAddrList[i]}); 
        }
        */
        EmailAddrList = EmailAddr.split(',');
        email.setToAddresses(EmailAddrList); 

        //email.setToAddresses(new String[] { EmailAddr.split(',') });
        //email.setToAddresses(new List<String>(EmailAddr)); 
        system.debug('EmailAddrList After ' + EmailAddrList.size());
        system.debug('EmailAddr ' + EmailAddr);
                
        /* /////////////////////////////// */
        /*
        //IF Factoring 
        if(load.FreightTM__Factoring__c == true) {
            email.setToAddresses(new String[] { 'ats@fleetdocs.com' }); 
        }
        //IF NOT Factoring 
        else {
            email.setToAddresses(new String[] { load.FreightTM__Customer__r.Email__c });
        }
        */
        /* /////////////////////////////// */
        
        //email.setPlainTextBody('Test Email Body'); //works
        //email.setHtmlBody('<b>Test Email Body</b>'); //works
        //email.setHtmlBody(hbody); //ERROR: does not display HTML content, only Plain Text of email template
        email.setHtmlBody(hbody); //ERROR: does not display HTML content, only Plain Text of email template
        email.setPlainTextBody(body);
        //setTargetObjectId id to send email to Contact
        //email.setTargetObjectId('01I460000005jMi'); //Load
        //email.setTargetObjectId(loadid); //Load record
        //email.setTargetObjectId('0034600001b7E7lAAE'); //Contact record
        email.setSaveAsActivity(true);
        
        //query through attached Files for this Load record
        //List<id> ConDocIds = new List<id>();
        
        //List<ContentDocumentLink> cDocLinkList = [SELECT ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId =: loadid];
        /*
        for(ContentDocumentLink cDocLink : cDocLinkList) 
        {
            ConDocIds.add(cDocLink.ContentDocumentId);
        }
        */
        //create Email Attachment List to add Files to
        List<Messaging.EmailFileAttachment> efaList = new List<Messaging.EmailFileAttachment>();
        
        system.debug('FileList Selected ' + checkboxFileList.size());
        
        //query for selected checkboxes and assign File to email attachment
        for(integer i=0; i < checkboxFileList.size(); i++) {
            
            /*
            String addressFull  = 'F-206, Daffodils, Magarpatta, Pune, India, 411028';
            String[] address     = addressFull.split(',');
            String houseNumber         =     address[0]; 
            String buildingName          =    address[1];
            */
            
            for(ContentVersion cv : [SELECT Title, PathOnClient, FileType, VersionData, ContentDocumentId FROM ContentVersion WHERE ContentDocumentId IN :ConDocIds AND ContentDocumentId =: checkboxFileList[i]]) 
            //for(ContentVersion cv : [SELECT Title, PathOnClient, FileType, VersionData FROM ContentVersion WHERE ContentDocumentId IN :ConDocIds AND Title =: checkboxFileList[i]])           
            {   
                Messaging.EmailFileAttachment efatt = new Messaging.EmailFileAttachment();
                efatt.setFileName(cv.Title + '.' + cv.FileType);
                blob ebody = cv.VersionData;
                efatt.setBody(ebody);
                //efatt.setBody(cv.VersionData);
                //efatt.setContentType();
                efaList.add(efatt);
                //fileAttachments.add(efatt); 
                system.debug('Email Info ' + cv.VersionData + ' ' + cv.Title + ' ' +  cv.FileType);
                system.debug('Email Attach ' + efatt); 
                
                /*
                blob ebody = cv.VersionData;
                string filename = 'Test_' + cv.Title + '.' + cv.FileType;
                //create email attachment
                efaList.add(new Messaging.EmailFileAttachment( 
                    //setFileName('Test_' + cv.Title + '.' + cv.FileType),
                    setFileName(filename),
                    //setBody(Blob.valueOf(cv.VersionData))
                    //blob ebody = cv.VersionData,
                    setBody(ebody)
                    //setBody(cv.VersionData)
                    //setContentType()
                ));
                system.debug('Email Attach ' + cv.VersionData + ' ' + cv.Title + ' ' +  cv.FileType);
                */
            }
        //}
        
            /* //////// */ 
            //Attach Invoice PDF -- build page reference for invoice PDF & attach to the email attachment list
            
            //if Invoice checkbox was selected
            system.debug('Checkbox i ' + checkboxFileList[i]);
            /*
            if(checkboxFileList[i] == 'RateCon.pdf') {
            //if(checkboxFileList[i] == 'Invoice_' + load.Invoice_Number__c + '.pdf') {
                //PageReference ref = new PageReference('Invoice');
                PageReference ref = Page.RateCon; //name of Invoice VFP
                ref.getParameters().put('id', loadid);
                Blob invpdf;
                if(Test.isRunningTest()) { //for unit test
                    invpdf = blob.valueOf('RateConTest');
                } else {
                    invpdf = ref.getContentAsPDF(); //convert to PDF
                }
                
                Messaging.EmailFileAttachment efaINV = new Messaging.EmailFileAttachment();
                efaINV.setFileName('RateCon.pdf');
                //efaINV.setFileName('Invoice_' + load.Invoice_Number__c + '.pdf');
                //efaINV.setFileName('Invoice_' + load.Invoice_Number__c + '_' + Organization.Name + '.pdf');
                efaINV.setBody(invpdf);
                efaList.add(efaINV);
            } */
            /* //////// */
            if(checkboxFileList[i] == 'BOL.pdf') {
            //if(checkboxFileList[i] == 'Invoice_' + load.Invoice_Number__c + '.pdf') {
                PageReference ref2 = Page.BOLWithSignature_PDF; //name of Invoice VFP
                ref2.getParameters().put('id', loadid);
                Blob bolpdf;
                if(Test.isRunningTest()) { //for unit test
                    bolpdf = blob.valueOf('BOLTest');
                } else {
                    bolpdf = ref2.getContentAsPDF(); //convert to PDF
                }
                
                Messaging.EmailFileAttachment efaBOL = new Messaging.EmailFileAttachment();
                efaBOL.setFileName('BOL.pdf');
                //efaINV.setFileName('Invoice_' + load.Invoice_Number__c + '.pdf');
                efaBOL.setBody(bolpdf);
                efaList.add(efaBOL);
            }
            /* //////// */
        }
        
        //attach all related files using setFileAttachments function
        email.setFileAttachments(efaList);   
        //email.setFileAttachments(new Messaging.EmailFileAttachment[] {efa});
        

        //send email
        try {
            
                if(Load.FreightTM__Carrier_Obj__r.FreightTM__Email__c != null || emailAddr != '') { //|| load.FreightTM__Factoring__c == true
                    //Messaging.SingleEmailMessage[] emailList = new Messaging.SingleEmailMessage[] { email };
                    //Messaging.sendEmail(emailList);   
                    Messaging.sendEmail(new Messaging.SingleEmailMessage[] { email });
                    //Messaging.SendEmailResult [] emailRes =   
                    //Messaging.sendEmail(new Messaging.SingleEmailMessage[] { email });  
                    
                    //log activity (2 Activity objects: EmailMessage + Task)
                    /* -- don't need Task, just use EmailMessage only 
                    insert new Task(
                        Subject = subject,
                        WhoId = '0034600001b7E7lAAE', //can only be Contact/Lead
                        //WhoId = Contact.Id, 
                        WhatId = loadid,
                        //Email = load.FreightTM__Customer__r.Email__c,
                        TaskSubtype = 'Email',
                        ActivityDate = Date.today()
                    );
                    */
                    /*
                    //log email history activity
                    insert new EmailMessage(
                        ToAddress = load.FreightTM__Customer__r.Email__c,
                        Subject = subject,
                        HtmlBody = hbody,
                        TextBody = body,
                        MessageDate = datetime.now(),
                        RelatedToId = loadid,
                        //CreatedById = UserInfo.getUserId()
                        FromAddress = UserInfo.getUserEmail(), // UserInfo.getOrganizationName()
                        FromName = UserInfo.getName()
                    );
                    */
                    //log email history activity
                    EmailMessage emailMsg = new EmailMessage();
                    
                    system.debug('EmailAddrList Size ' + EmailAddrList.size());
                    
                    //EmailAddrList = EmailAddr.split(',');
                    //emailMsg.ToAddress = EmailAddrList; 
                    
                    emailMsg.ToAddress = EmailAddr;
                    
                    /*
                    for(integer i=0; i < EmailAddrList.size(); i++) {
                        system.debug('EmailAddrList i ' + EmailAddrList[i]);
                        emailMsg.ToAddress = EmailAddrList[i];
                    }
                    */
                    
                   
                    /* /////////////////////////////// */
                    /*
                    //IF Factoring 
                    if(load.FreightTM__Factoring__c == true) {
                        emailMsg.ToAddress = 'ats@fleetdocs.com'; 
                    }
                    //IF NOT Factoring 
                    else {
                        emailMsg.ToAddress = load.FreightTM__Customer__r.Email__c;
                    }
                    */
                    /* /////////////////////////////// */
                    
                    emailMsg.Subject = subject;
                    emailMsg.HtmlBody = hbody;
                    //emailMsg.HtmlBody = hbody;
                    emailMsg.TextBody = body;
                    emailMsg.MessageDate = system.now(); //datetime.now(); 
                    emailMsg.RelatedToId = loadid;
                    //emailMsg.CreatedById = UserInfo.getUserId()
                    emailMsg.FromAddress = UserInfo.getUserEmail(); // UserInfo.getOrganizationName()
                    emailMsg.FromName = UserInfo.getName();
                    emailMsg.Status = '3';
                    insert emailMsg;
                    
                    /* ////////////////////////////////////////////
                    //insert attachment under email history activity record
                    if(efaList.size() > 0) {
                        attachments = new Attachment[] {};
                        //Attachment[] attachments = new Attachment[] {};
                        Attachment attachment = null;
                        for(Integer i=0; i < efaList.size(); i++) {
                            attachment = new Attachment();
                            attachment.Name = efaList[i].filename;
                            attachment.Body = efaList[i].body;
                            attachment.ParentId = emailMsg.Id; 
                            attachments.add(attachment);
                        }
                        insert attachments;
                    }
                    //////////////////////////////////////////////// */
                    
                    //insert attachment under email history activity record
                    /*
                    PageReference ref = Page.RateCon; //name of Quote VFP
                    ref.getParameters().put('id', loadid);
                    Blob invpdf;
                    if(Test.isRunningTest()) { //for unit test
                        invpdf = blob.valueOf('RateConTest');
                    } else {
                        invpdf = ref.getContentAsPDF(); //convert to PDF
                    } */
                    
                    PageReference ref2 = Page.BOLWithSignature_PDF; //name of Invoice VFP
                    ref2.getParameters().put('id', loadid);
                    Blob bolpdf;
                    if(Test.isRunningTest()) { //for unit test
                        bolpdf = blob.valueOf('BOLTest');
                    } else {
                        bolpdf = ref2.getContentAsPDF(); //convert to PDF
                    }
                    
                    if(efaList.size() > 0) {
                        //query for selected checkboxes and assign File to email attachment
                        for(integer i=0; i < checkboxFileList.size(); i++) {
                            if(checkboxFileList[i] == 'BOL.pdf') {
                                //insert pdf as File under LQ's File/email history activity record
                                ContentVersion conVer = new ContentVersion();
                                conVer.ContentLocation = 'S'; //S = this document is in Salesforce, E = external files
                                conVer.PathOnClient = 'BOL.pdf'; //file name, extension is important as it will help the file in preview
                                conVer.Title = 'BOL'; //display name of the file
                                conVer.VersionData = bolpdf;
                                //conVer.VersionData = EncodingUtil.base64Decode(yourFilesContent); // converting binary string to Blob
                                insert conVer; //Insert ContentVersion
            
                                //first get Content Document Id from ContentVersion Object
                                Id conDoc = [SELECT ContentDocumentId FROM ContentVersion WHERE Id =:conVer.Id].ContentDocumentId;
                                
                                /*
                                //create ContentDocumentLink record (LQ File)
                                ContentDocumentLink conDocLink = New ContentDocumentLink();
                                conDocLink.LinkedEntityId = Legid; // Specify RECORD ID here i.e Any Object ID (Standard Object/Custom Object)
                                conDocLink.ContentDocumentId = conDoc;  //ContentDocumentId Id from ContentVersion
                                conDocLink.shareType = 'V';
                                insert conDocLink;
                                */
                                
                                //create ContentDocumentLink record (Email Activity) 
                                ContentDocumentLink conDocLinkE = New ContentDocumentLink();
                                conDocLinkE.LinkedEntityId = emailMsg.Id; // Specify RECORD ID here i.e Any Object ID (Standard Object/Custom Object)
                                conDocLinkE.ContentDocumentId = conDoc;  //ContentDocumentId Id from ContentVersion
                                conDocLinkE.shareType = 'V';
                                insert conDocLinkE;
                                //end////////////////////////////////////////////////
                            }
                            /*
                            if(checkboxFileList[i] == 'RateCon.pdf') {
                                //insert pdf as File under LQ's File/email history activity record
                                ContentVersion conVer = new ContentVersion();
                                conVer.ContentLocation = 'S'; //S = this document is in Salesforce, E = external files
                                conVer.PathOnClient = 'RateCon.pdf'; //file name, extension is important as it will help the file in preview
                                conVer.Title = 'RateCon'; //display name of the file
                                conVer.VersionData = invpdf;
                                //conVer.VersionData = EncodingUtil.base64Decode(yourFilesContent); // converting binary string to Blob
                                insert conVer; //Insert ContentVersion
            
                                //first get Content Document Id from ContentVersion Object
                                Id conDoc = [SELECT ContentDocumentId FROM ContentVersion WHERE Id =:conVer.Id].ContentDocumentId;
                                */
                            
                                /*
                                //create ContentDocumentLink record (LQ File)
                                ContentDocumentLink conDocLink = New ContentDocumentLink();
                                conDocLink.LinkedEntityId = Legid; // Specify RECORD ID here i.e Any Object ID (Standard Object/Custom Object)
                                conDocLink.ContentDocumentId = conDoc;  //ContentDocumentId Id from ContentVersion
                                conDocLink.shareType = 'V';
                                insert conDocLink;
                                */
                                
                                //create ContentDocumentLink record (Email Activity) 
                                /*
                                ContentDocumentLink conDocLinkE = New ContentDocumentLink();
                                conDocLinkE.LinkedEntityId = emailMsg.Id; // Specify RECORD ID here i.e Any Object ID (Standard Object/Custom Object)
                                conDocLinkE.ContentDocumentId = conDoc;  //ContentDocumentId Id from ContentVersion
                                conDocLinkE.shareType = 'V';
                                insert conDocLinkE; 
                                //end////////////////////////////////////////////////
                            }*/
                        }
                        
                    }
                    
                    //update Invoice Status + Invoiced On fields on Load record
                    //LQ.FreightTM__Invoice_Status__c = 'Invoiced'; 
                    //LQ.FreightTM__Invoiced_On__c = system.today(); //date.today(); 
                    Database.update(Load);
                    
                    //success message
                    ApexPages.addMessage(new ApexPages.message(ApexPages.Severity.CONFIRM, 'Email (with ' + checkboxFileList.size() + ' attachments) has been sent'));
                    return null;

            }
        }
        catch (Exception e) {
            ApexPages.addMessage(new ApexPages.message(ApexPages.Severity.INFO, 'Error ' + e));
            throw e;
        }
        finally { //To avoid 'Maximum view state size limit (170KB) exceeded' error message, empty file attachments
            for(ContentVersion file : cvfileList)
            {
                //file.Title = '';
                file.VersionData = null;
            }
            if(efaList.size() > 0) {
            //if(attachments.size() > 0) {
                attachments = new Attachment[] {};
                for(Attachment att : attachments)
                {
                    att.Name = '';
                    att.Body = null;
                }
            }
            /*
            for(ContentDocumentLink cDocLink : cDocLinkList) {
                cDocLink.ContentDocumentId = '';
            }       
            efaList = null;
            cvfileList = null;
            cDocLinkList = null;
            attachments = null;
            body = null;
            hbody = null;
            et = null;
            invpdf = null;
            email = null;
            ConDocIds = null;
            EmailTemplateID = '';
            */
            //attbody = null;
        }
        return null;
    }
    
    //all Files under a Load record
    //public with sharing class A {
        //public String p {get;set;}
    //}

}